/* Generated by dbus-binding-tool; do not edit! */

#ifndef __dbus_glib_marshal_wifi_MARSHAL_H__
#define __dbus_glib_marshal_wifi_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */

/* BOOLEAN:STRING,POINTER,POINTER */
extern void dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                                    GValue       *return_value,
                                                                    guint         n_param_values,
                                                                    const GValue *param_values,
                                                                    gpointer      invocation_hint,
                                                                    gpointer      marshal_data);
void
dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                        GValue       *return_value G_GNUC_UNUSED,
                                                        guint         n_param_values,
                                                        const GValue *param_values,
                                                        gpointer      invocation_hint G_GNUC_UNUSED,
                                                        gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (gpointer     data1,
                                                                    gpointer     arg_1,
                                                                    gpointer     arg_2,
                                                                    gpointer     arg_3,
                                                                    gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER */
extern void dbus_glib_marshal_wifi_BOOLEAN__POINTER (GClosure     *closure,
                                                     GValue       *return_value,
                                                     guint         n_param_values,
                                                     const GValue *param_values,
                                                     gpointer      invocation_hint,
                                                     gpointer      marshal_data);
void
dbus_glib_marshal_wifi_BOOLEAN__POINTER (GClosure     *closure,
                                         GValue       *return_value G_GNUC_UNUSED,
                                         guint         n_param_values,
                                         const GValue *param_values,
                                         gpointer      invocation_hint G_GNUC_UNUSED,
                                         gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER) (gpointer     data1,
                                                     gpointer     arg_1,
                                                     gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 2);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,POINTER */
extern void dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                            GValue       *return_value,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint,
                                                            gpointer      marshal_data);
void
dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                GValue       *return_value G_GNUC_UNUSED,
                                                guint         n_param_values,
                                                const GValue *param_values,
                                                gpointer      invocation_hint G_GNUC_UNUSED,
                                                gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,POINTER */
extern void dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                                   GValue       *return_value,
                                                                   guint         n_param_values,
                                                                   const GValue *param_values,
                                                                   gpointer      invocation_hint,
                                                                   gpointer      marshal_data);
void
dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                       GValue       *return_value G_GNUC_UNUSED,
                                                       guint         n_param_values,
                                                       const GValue *param_values,
                                                       gpointer      invocation_hint G_GNUC_UNUSED,
                                                       gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gpointer     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_wifi_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                             GValue       *return_value,
                                                             guint         n_param_values,
                                                             const GValue *param_values,
                                                             gpointer      invocation_hint,
                                                             gpointer      marshal_data);
void
dbus_glib_marshal_wifi_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                 GValue       *return_value G_GNUC_UNUSED,
                                                 guint         n_param_values,
                                                 const GValue *param_values,
                                                 gpointer      invocation_hint G_GNUC_UNUSED,
                                                 gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_wifi_MARSHAL_H__ */

gboolean wifi_get_adapter_list(GObject *pObject, gchar **pszRet, GError **ppError);
gboolean wifi_get_adapter_config(GObject *pObject, gchar *pszIfName, gchar **ppszConfig, GError **ppError);
gboolean wifi_get_adapter_capability(GObject *pObject, gchar *pszIfName, gchar **ppszCapability, GError **ppError);
gboolean wifi_get_adapter_status(GObject *pObject, gchar *pszIfName, gchar **ppszStatus, GError **ppError);
gboolean wifi_enable_adapter(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_disable_adapter(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_exec_schedule(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_apply_adapter(GObject *pObject, gchar *pszIfName, gchar *pszConfig, GError **ppError);
gboolean wifi_switch_topology(GObject *pObject, gchar *pszTopology, GError **ppError);
gboolean wifi_switch_adapter_topology(GObject *pObject, gchar *pszIfName, gchar *pszTopology, GError **ppError);
gboolean wifi_add_adapter(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_remove_adapter(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_refresh_adapter_list(GObject *pObject, GError **ppError);
gboolean wifi_force_remove_all_adapters(GObject *pObject, GError **ppError);
gboolean wifi_get_connection_list(GObject *pObject, gchar *pszIfName, gchar **ppszConfig, GError **ppError);
gboolean wifi_get_connected_ap_info(GObject *pObject, gchar *pszIfName, gchar **ppszConfig, GError **ppError);
gboolean wifi_get_bridge_list(GObject *pObject, gchar **pszRet, GError **ppError);
gboolean wifi_get_bridge_config(GObject *pObject, gchar *pszIfName, gchar **ppszConfig, GError **ppError);
gboolean wifi_apply_bridge(GObject *pObject, gchar *pszIfName, gchar *pszConfig, GError **ppError);
gboolean wifi_scan_networks(GObject *pObject, gchar *pszIfName, gchar **ppszConfig, GError **ppError);
gboolean wifi_refresh_wlan_slave_list(GObject *pObject, GError **ppError);
gboolean wifi_enable_wps_with_pbc(GObject *pObject, gchar *pszIfName, GError **ppError);
gboolean wifi_enable_wps_with_pin_code(GObject *pObject, gchar *pszIfName, gchar *pszPin, GError **ppError);
gboolean wifi_switch_wifi_on_off(GObject *pObject, GError **ppError);
gboolean wifi_reset_to_default(GObject *pObject, GError **ppError);
gboolean wifi_set_country_code(GObject *pObject, gchar *pszCountry, GError **ppError);

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_wifi_methods[] = {
  { (GCallback) wifi_get_adapter_list, dbus_glib_marshal_wifi_BOOLEAN__POINTER_POINTER, 0 },
  { (GCallback) wifi_get_adapter_config, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 49 },
  { (GCallback) wifi_get_adapter_capability, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 113 },
  { (GCallback) wifi_get_adapter_status, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 185 },
  { (GCallback) wifi_enable_adapter, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 249 },
  { (GCallback) wifi_disable_adapter, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 295 },
  { (GCallback) wifi_exec_schedule, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 342 },
  { (GCallback) wifi_apply_adapter, dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER, 387 },
  { (GCallback) wifi_switch_topology, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 443 },
  { (GCallback) wifi_switch_adapter_topology, dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER, 492 },
  { (GCallback) wifi_add_adapter, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 559 },
  { (GCallback) wifi_remove_adapter, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 602 },
  { (GCallback) wifi_refresh_adapter_list, dbus_glib_marshal_wifi_BOOLEAN__POINTER, 648 },
  { (GCallback) wifi_force_remove_all_adapters, dbus_glib_marshal_wifi_BOOLEAN__POINTER, 688 },
  { (GCallback) wifi_get_connection_list, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 732 },
  { (GCallback) wifi_get_connected_ap_info, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 797 },
  { (GCallback) wifi_get_bridge_list, dbus_glib_marshal_wifi_BOOLEAN__POINTER_POINTER, 863 },
  { (GCallback) wifi_get_bridge_config, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 911 },
  { (GCallback) wifi_apply_bridge, dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER, 974 },
  { (GCallback) wifi_scan_networks, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER_POINTER, 1029 },
  { (GCallback) wifi_refresh_wlan_slave_list, dbus_glib_marshal_wifi_BOOLEAN__POINTER, 1089 },
  { (GCallback) wifi_enable_wps_with_pbc, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 1131 },
  { (GCallback) wifi_enable_wps_with_pin_code, dbus_glib_marshal_wifi_BOOLEAN__STRING_STRING_POINTER, 1180 },
  { (GCallback) wifi_switch_wifi_on_off, dbus_glib_marshal_wifi_BOOLEAN__POINTER, 1241 },
  { (GCallback) wifi_reset_to_default, dbus_glib_marshal_wifi_BOOLEAN__POINTER, 1278 },
  { (GCallback) wifi_set_country_code, dbus_glib_marshal_wifi_BOOLEAN__STRING_POINTER, 1314 },
};

const DBusGObjectInfo dbus_glib_wifi_object_info = {  1,
  dbus_glib_wifi_methods,
  30,
"com.synology.wifi\0GetAdapterList\0S\0list\0O\0F\0N\0s\0\0com.synology.wifi\0GetAdapterConfig\0S\0ifname\0I\0s\0config\0O\0F\0N\0s\0\0com.synology.wifi\0GetAdapterCapability\0S\0ifname\0I\0s\0capability\0O\0F\0N\0s\0\0com.synology.wifi\0GetAdapterStatus\0S\0ifname\0I\0s\0status\0O\0F\0N\0s\0\0com.synology.wifi\0EnableAdapter\0S\0ifname\0I\0s\0\0com.synology.wifi\0DisableAdapter\0S\0ifname\0I\0s\0\0com.synology.wifi\0ExecSchedule\0S\0ifname\0I\0s\0\0com.synology.wifi\0ApplyAdapter\0S\0ifname\0I\0s\0config\0I\0s\0\0com.synology.wifi\0SwitchTopology\0S\0topology\0I\0s\0\0com.synology.wifi\0SwitchAdapterTopology\0S\0ifname\0I\0s\0topology\0I\0s\0\0com.synology.wifi\0AddAdapter\0S\0ifname\0I\0s\0\0com.synology.wifi\0RemoveAdapter\0S\0ifname\0I\0s\0\0com.synology.wifi\0RefreshAdapterList\0S\0\0com.synology.wifi\0ForceRemoveAllAdapters\0S\0\0com.synology.wifi\0GetConnectionList\0S\0ifname\0I\0s\0config\0O\0F\0N\0s\0\0com.synology.wifi\0GetConnectedAPInfo\0S\0ifname\0I\0s\0config\0O\0F\0N\0s\0\0com.synology.wifi\0GetBridgeList\0S\0list\0O\0F\0N\0s\0\0com.synology.wifi\0GetBridgeConfig\0S\0ifname\0I\0s\0config\0O\0F\0N\0s\0\0com.synology.wifi\0ApplyBridge\0S\0ifname\0I\0s\0config\0I\0s\0\0com.synology.wifi\0ScanNetworks\0S\0ifname\0I\0s\0config\0O\0F\0N\0s\0\0com.synology.wifi\0RefreshWlanSlaveList\0S\0\0com.synology.wifi\0EnableWPSWithPBC\0S\0ifname\0I\0s\0\0com.synology.wifi\0EnableWPSWithPinCode\0S\0ifname\0I\0s\0pin\0I\0s\0\0com.synology.wifi\0SwitchWifiOnOff\0S\0\0com.synology.wifi\0ResetToDefault\0S\0\0com.synology.wifi\0SetCountryCode\0S\0country\0I\0s\0\0\0",
"\0",
"\0"
};
