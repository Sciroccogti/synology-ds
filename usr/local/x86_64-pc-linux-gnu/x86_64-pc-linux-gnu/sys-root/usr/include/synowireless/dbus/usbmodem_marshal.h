/* Generated by dbus-binding-tool; do not edit! */

#ifndef __dbus_glib_marshal_usbmodem_MARSHAL_H__
#define __dbus_glib_marshal_usbmodem_MARSHAL_H__

#include	<glib-object.h>

G_BEGIN_DECLS

#ifdef G_ENABLE_DEBUG
#define g_marshal_value_peek_boolean(v)  g_value_get_boolean (v)
#define g_marshal_value_peek_char(v)     g_value_get_schar (v)
#define g_marshal_value_peek_uchar(v)    g_value_get_uchar (v)
#define g_marshal_value_peek_int(v)      g_value_get_int (v)
#define g_marshal_value_peek_uint(v)     g_value_get_uint (v)
#define g_marshal_value_peek_long(v)     g_value_get_long (v)
#define g_marshal_value_peek_ulong(v)    g_value_get_ulong (v)
#define g_marshal_value_peek_int64(v)    g_value_get_int64 (v)
#define g_marshal_value_peek_uint64(v)   g_value_get_uint64 (v)
#define g_marshal_value_peek_enum(v)     g_value_get_enum (v)
#define g_marshal_value_peek_flags(v)    g_value_get_flags (v)
#define g_marshal_value_peek_float(v)    g_value_get_float (v)
#define g_marshal_value_peek_double(v)   g_value_get_double (v)
#define g_marshal_value_peek_string(v)   (char*) g_value_get_string (v)
#define g_marshal_value_peek_param(v)    g_value_get_param (v)
#define g_marshal_value_peek_boxed(v)    g_value_get_boxed (v)
#define g_marshal_value_peek_pointer(v)  g_value_get_pointer (v)
#define g_marshal_value_peek_object(v)   g_value_get_object (v)
#define g_marshal_value_peek_variant(v)  g_value_get_variant (v)
#else /* !G_ENABLE_DEBUG */
/* WARNING: This code accesses GValues directly, which is UNSUPPORTED API.
 *          Do not access GValues directly in your code. Instead, use the
 *          g_value_get_*() functions
 */
#define g_marshal_value_peek_boolean(v)  (v)->data[0].v_int
#define g_marshal_value_peek_char(v)     (v)->data[0].v_int
#define g_marshal_value_peek_uchar(v)    (v)->data[0].v_uint
#define g_marshal_value_peek_int(v)      (v)->data[0].v_int
#define g_marshal_value_peek_uint(v)     (v)->data[0].v_uint
#define g_marshal_value_peek_long(v)     (v)->data[0].v_long
#define g_marshal_value_peek_ulong(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_int64(v)    (v)->data[0].v_int64
#define g_marshal_value_peek_uint64(v)   (v)->data[0].v_uint64
#define g_marshal_value_peek_enum(v)     (v)->data[0].v_long
#define g_marshal_value_peek_flags(v)    (v)->data[0].v_ulong
#define g_marshal_value_peek_float(v)    (v)->data[0].v_float
#define g_marshal_value_peek_double(v)   (v)->data[0].v_double
#define g_marshal_value_peek_string(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_param(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_boxed(v)    (v)->data[0].v_pointer
#define g_marshal_value_peek_pointer(v)  (v)->data[0].v_pointer
#define g_marshal_value_peek_object(v)   (v)->data[0].v_pointer
#define g_marshal_value_peek_variant(v)  (v)->data[0].v_pointer
#endif /* !G_ENABLE_DEBUG */

/* BOOLEAN:STRING,POINTER,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                                        GValue       *return_value,
                                                                        guint         n_param_values,
                                                                        const GValue *param_values,
                                                                        gpointer      invocation_hint,
                                                                        gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER (GClosure     *closure,
                                                            GValue       *return_value G_GNUC_UNUSED,
                                                            guint         n_param_values,
                                                            const GValue *param_values,
                                                            gpointer      invocation_hint G_GNUC_UNUSED,
                                                            gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (gpointer     data1,
                                                                    gpointer     arg_1,
                                                                    gpointer     arg_2,
                                                                    gpointer     arg_3,
                                                                    gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                                GValue       *return_value,
                                                                guint         n_param_values,
                                                                const GValue *param_values,
                                                                gpointer      invocation_hint,
                                                                gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER (GClosure     *closure,
                                                    GValue       *return_value G_GNUC_UNUSED,
                                                    guint         n_param_values,
                                                    const GValue *param_values,
                                                    gpointer      invocation_hint G_GNUC_UNUSED,
                                                    gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_POINTER) (gpointer     data1,
                                                            gpointer     arg_1,
                                                            gpointer     arg_2,
                                                            gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                                       GValue       *return_value,
                                                                       guint         n_param_values,
                                                                       const GValue *param_values,
                                                                       gpointer      invocation_hint,
                                                                       gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_POINTER (GClosure     *closure,
                                                           GValue       *return_value G_GNUC_UNUSED,
                                                           guint         n_param_values,
                                                           const GValue *param_values,
                                                           gpointer      invocation_hint G_GNUC_UNUSED,
                                                           gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (gpointer     data1,
                                                                   gpointer     arg_1,
                                                                   gpointer     arg_2,
                                                                   gpointer     arg_3,
                                                                   gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 4);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_pointer (param_values + 3),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:POINTER,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                                 GValue       *return_value,
                                                                 guint         n_param_values,
                                                                 const GValue *param_values,
                                                                 gpointer      invocation_hint,
                                                                 gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__POINTER_POINTER (GClosure     *closure,
                                                     GValue       *return_value G_GNUC_UNUSED,
                                                     guint         n_param_values,
                                                     const GValue *param_values,
                                                     gpointer      invocation_hint G_GNUC_UNUSED,
                                                     gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__POINTER_POINTER) (gpointer     data1,
                                                             gpointer     arg_1,
                                                             gpointer     arg_2,
                                                             gpointer     data2);
  register GMarshalFunc_BOOLEAN__POINTER_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 3);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__POINTER_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_pointer (param_values + 1),
                       g_marshal_value_peek_pointer (param_values + 2),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,STRING,BOOLEAN,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER (GClosure     *closure,
                                                                                      GValue       *return_value,
                                                                                      guint         n_param_values,
                                                                                      const GValue *param_values,
                                                                                      gpointer      invocation_hint,
                                                                                      gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER (GClosure     *closure,
                                                                          GValue       *return_value G_GNUC_UNUSED,
                                                                          guint         n_param_values,
                                                                          const GValue *param_values,
                                                                          gpointer      invocation_hint G_GNUC_UNUSED,
                                                                          gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER) (gpointer     data1,
                                                                                  gpointer     arg_1,
                                                                                  gpointer     arg_2,
                                                                                  gpointer     arg_3,
                                                                                  gboolean     arg_4,
                                                                                  gpointer     arg_5,
                                                                                  gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 6);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_boolean (param_values + 4),
                       g_marshal_value_peek_pointer (param_values + 5),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

/* BOOLEAN:STRING,STRING,STRING,POINTER */
extern void dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                              GValue       *return_value,
                                                                              guint         n_param_values,
                                                                              const GValue *param_values,
                                                                              gpointer      invocation_hint,
                                                                              gpointer      marshal_data);
void
dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_POINTER (GClosure     *closure,
                                                                  GValue       *return_value G_GNUC_UNUSED,
                                                                  guint         n_param_values,
                                                                  const GValue *param_values,
                                                                  gpointer      invocation_hint G_GNUC_UNUSED,
                                                                  gpointer      marshal_data)
{
  typedef gboolean (*GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER) (gpointer     data1,
                                                                          gpointer     arg_1,
                                                                          gpointer     arg_2,
                                                                          gpointer     arg_3,
                                                                          gpointer     arg_4,
                                                                          gpointer     data2);
  register GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER callback;
  register GCClosure *cc = (GCClosure*) closure;
  register gpointer data1, data2;
  gboolean v_return;

  g_return_if_fail (return_value != NULL);
  g_return_if_fail (n_param_values == 5);

  if (G_CCLOSURE_SWAP_DATA (closure))
    {
      data1 = closure->data;
      data2 = g_value_peek_pointer (param_values + 0);
    }
  else
    {
      data1 = g_value_peek_pointer (param_values + 0);
      data2 = closure->data;
    }
  callback = (GMarshalFunc_BOOLEAN__STRING_STRING_STRING_POINTER) (marshal_data ? marshal_data : cc->callback);

  v_return = callback (data1,
                       g_marshal_value_peek_string (param_values + 1),
                       g_marshal_value_peek_string (param_values + 2),
                       g_marshal_value_peek_string (param_values + 3),
                       g_marshal_value_peek_pointer (param_values + 4),
                       data2);

  g_value_set_boolean (return_value, v_return);
}

G_END_DECLS

#endif /* __dbus_glib_marshal_usbmodem_MARSHAL_H__ */

#include <synowireless/dbus/usbmodem_server.hpp>
using synowireless::dbus::USBModemObject;

gboolean usbmodem_connect(USBModemObject *pObject, gchar *szDevId, GError **ppError);
gboolean usbmodem_disconnect(USBModemObject *pObject, gchar *szDevId, GError **ppError);
gboolean usbmodem_get_usbmodem_list(USBModemObject *pObject, gchar **pszRet, GError **ppError);
gboolean usbmodem_get_usbmodem(USBModemObject *pObject, gchar *szDevId, gchar **pszRet, GError **ppError);
gboolean usbmodem_get_sim_info(USBModemObject *pObject, gchar *szDevId, gchar **pszRet, GError **ppError);
gboolean usbmodem_unlock_sim(USBModemObject *pObject, gchar *szDevId, gchar *szPin, GError **ppError);
gboolean usbmodem_set_pin(USBModemObject *pObject, gchar *szDevId, gchar *szPinOld, gchar *szPinNew, gboolean blProtection, GError **ppError);
gboolean usbmodem_get_profile(USBModemObject *pObject, gchar *szDevId, gchar **pszRet, GError **ppError);
gboolean usbmodem_set_profile(USBModemObject *pObject, gchar *szDevId, gchar *szProfile, GError **ppError);
gboolean usbmodem_unlock_pin(USBModemObject *pObject, gchar *szDevId, gchar *szPuk, gchar *szPin, GError **ppError);
gboolean usbmodem_get_usbmodem_if_list(USBModemObject *pObject, gchar **pszRet, GError **ppError);
gboolean usbmodem_get_devid_by_ifname(USBModemObject *pObject, gchar *szIfName, gchar **pszRet, GError **ppError);

#include <dbus/dbus-glib.h>
static const DBusGMethodInfo dbus_glib_usbmodem_methods[] = {
  { (GCallback) usbmodem_connect, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER, 0 },
  { (GCallback) usbmodem_disconnect, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER, 43 },
  { (GCallback) usbmodem_get_usbmodem_list, dbus_glib_marshal_usbmodem_BOOLEAN__POINTER_POINTER, 89 },
  { (GCallback) usbmodem_get_usbmodem, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER, 152 },
  { (GCallback) usbmodem_get_sim_info, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER, 216 },
  { (GCallback) usbmodem_unlock_sim, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_POINTER, 279 },
  { (GCallback) usbmodem_set_pin, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_BOOLEAN_POINTER, 332 },
  { (GCallback) usbmodem_get_profile, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER, 411 },
  { (GCallback) usbmodem_set_profile, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_POINTER, 473 },
  { (GCallback) usbmodem_unlock_pin, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_STRING_STRING_POINTER, 531 },
  { (GCallback) usbmodem_get_usbmodem_if_list, dbus_glib_marshal_usbmodem_BOOLEAN__POINTER_POINTER, 592 },
  { (GCallback) usbmodem_get_devid_by_ifname, dbus_glib_marshal_usbmodem_BOOLEAN__STRING_POINTER_POINTER, 660 },
};

const DBusGObjectInfo dbus_glib_usbmodem_object_info = {  1,
  dbus_glib_usbmodem_methods,
  12,
"com.synology.usbmodem\0Connect\0S\0devid\0I\0s\0\0com.synology.usbmodem\0Disconnect\0S\0devid\0I\0s\0\0com.synology.usbmodem\0GetUSBModemList\0S\0usbmodem_list\0O\0F\0N\0s\0\0com.synology.usbmodem\0GetUSBModem\0S\0devid\0I\0s\0usbmodem\0O\0F\0N\0s\0\0com.synology.usbmodem\0GetSimInfo\0S\0devid\0I\0s\0usbmodem\0O\0F\0N\0s\0\0com.synology.usbmodem\0UnlockSIM\0S\0devid\0I\0s\0pin\0I\0s\0\0com.synology.usbmodem\0SetPIN\0S\0devid\0I\0s\0oldpin\0I\0s\0newpin\0I\0s\0protection\0I\0b\0\0com.synology.usbmodem\0GetProfile\0S\0devid\0I\0s\0profile\0O\0F\0N\0s\0\0com.synology.usbmodem\0SetProfile\0S\0devid\0I\0s\0profile\0I\0s\0\0com.synology.usbmodem\0UnlockPIN\0S\0devid\0I\0s\0puk\0I\0s\0pin\0I\0s\0\0com.synology.usbmodem\0GetUSBModemIfList\0S\0usbmodem_if_list\0O\0F\0N\0s\0\0com.synology.usbmodem\0GetDevIdByIfName\0S\0ifname\0I\0s\0devid\0O\0F\0N\0s\0\0\0",
"\0",
"\0"
};
