// Copyright (c) 2000-2013 Synology Inc. All rights reserved.
#ifndef __SYNO_USER_H__
#define __SYNO_USER_H__

#include <grp.h>
#include <pwd.h>
#include <shadow.h>
#include <sys/cdefs.h>
#include <sys/types.h>

#include <synocore/synoglobal.h>
#include <synosdk/group.h>
#include <synocore/hash.h>
#include <synocore/list.h>
#include <synocore/mresult.h>

__BEGIN_DECLS;

/**
 * @addtogroup USER
 *
 * @brief Some basic structure and operation of User. Learn more at libsynolocalaccount.
 *
 * @{
 */

#define MAX_SMBPASSWD_LEN	33
#define ENCODE_MAX_LEN		3072
#define SZ_SMB_EMPTY_PWD_LM	"AAD3B435B51404EEAAD3B435B51404EE"
#define SZ_SMB_EMPTY_PWD_MD4	"31D6CFE0D16AE931B73C59D7E0C089C0"
#define MAX_PASSWD_LINE_LEN	16384
#define SZ_DEFUSER		"admin"
#define SZ_GUEST		"guest"
#define SZ_MAILER_DAEMON	"MAILER-DAEMON"
#define SZ_POSTMASTER		"POSTMASTER"
#define SZ_SYNOLOGYCMS		"SynologyCMS"
/**
 * ldap user start from 1000000 defined in libsynoldap
 * samba user uid is generated by hash function
 */
#define UID_ROOT		0
#define UID_HTTP		1023
#define UID_DEFUSER		1024
#define UID_GUEST		1025
#define UID_SYNOLOGYCMS		50000
#define UID_SYNOPAC		50001
#define UID_ERR			((uid_t) -1)
#define NOT_EXPIRED		-1
#define EXPIRED_NOW		1
#define NO_CHANGE_EXPIRED		-2
#define SP_MAX 99999

#define SZF_SHELL			"/bin/sh"

#define SZF_SYNOUSER		"/etc/synouser.conf"
#define SZF_PASSWD			"/etc/passwd"
#define SZF_SHADOW			"/etc/shadow"
#define SZF_SMBPASSWD		"/etc/samba/private/smbpasswd"
#define SZF_SYNOAPPPRIV		"/etc/synoappprivilege.conf"
#define SZF_STRONG_PWD_CONF	"/usr/syno/etc/strongpassword.conf"

#define SZF_DEF_PASSWD		"/etc.defaults/passwd"
#define SZF_DEF_SHADOW		"/etc.defaults/shadow"
#define SZF_DEF_SMBPASSWD	"/etc.defaults/samba/private/smbpasswd"

#define SZD_USER_PREFERENCE	"/usr/syno/etc/preference"
#define SZD_DSM_TMP			"/tmp/DSMTaskMgr"
#define SZD_FILE_SEARCH_TMP	SZ_VOL_TMPDIR"/webfm/FBSearch"

#define SZK_PASSWD_ALLITEMS	7
#define SZK_SHADOW_ALLITEMS	9
#define SZK_SMBPASSWD_ALLITEMS	7

#define SYNO_USERNAME_UTF8_MAX	492
#define SYNO_USERNAME_UTF32_MAX	64
/** With \0 */
#define SYNO_USER_PLAIN_PWD_UTF8_MAX 768
/** With \0 */
#define SYNO_USER_PLAIN_PWD_UTF32_MAX 128
#define SYNO_USER_MATRIX_PWD_UTF8_MAX (((SYNO_USER_PLAIN_PWD_UTF8_MAX -1) /8 +1)* 16)
#define	SYNO_USER_HOME_PVIVILEGE	0700

#define SYNO_USER_FULLNAME_UTF8_MAX		(SYNO_USER_FULLNAME_UTF32_MAX * 6 + 1)
#define SYNO_USER_FULLNAME_UTF32_MAX	64

/** application privilege settings' name */
#define SZK_APPPRIV_FILEBROWSER		"SYNO.SDS.App.FileStation3.Instance"
#define SZK_APPPRIV_FTP				"SYNO.FTP"
#define SZK_APPPRIV_AUDIO			"SYNO.SDS.AudioStation.Application"
#define SZK_APPPRIV_DOWNLOAD		"SYNO.SDS.DownloadStation.Application"
#define SZK_APPPRIV_SURVEILLANCE	"SYNO.SDS.SurveillanceStation"
#define SZK_APPPRIV_WEBDAV			"SYNO.SDS.WebDAVServer.Instance"
#define SZK_APPPRIV_RSYNC			"SYNO.Rsync"
#define SZK_APPPRIV_VERSIONBACKUP	"SYNO.SDS.BackupService.Instance"
#define SZK_APPRRIV_CLOUDSTATION	"SYNO.SDS.CSTN.Instance"
#define SZK_APPRRIV_CLOUDSYNC		"SYNO.SDS.DSCloudSync.Instance"
#define SZD_DSM_DIR					"/usr/syno/synoman/webman/"
#define SZD_MODULE_DIR				"modules"
#define SZD_THIRD_PARTY_DIR			"3rdparty"

/**
 * See crypt(3) for explaination.
 */
#define SZ_MD5_ENCRYPT_SALT_PREFIX	"$1$"
#define MD5_ENCRYPTED_LENGTH		22
#define SZ_SHA512_ENCRYPT_SALT_PREFIX	"$6$"
#define SHA512_ENCRYPTED_LENGTH		86
#define LOCAL_PASSWD_BUF_SIZE		128

/**
 * WebStation for User's Directory name.
 */
#define SZK_USER_HTTP_USERNAME		"http"
#define SZK_USER_WEB_DIR			"www"

/**
 * The user information.
 */
typedef struct {
	/**
	 * The UTF-8 string of User Name.
	 */
	char       *szName;
	uid_t       pw_uid;
	gid_t       pw_gid;
	/**
	 * The UTF-8 sting of user Real Name.
	 */
	char       *szFullname;
	char       *pw_dir;
	char       *pw_shell;
	/**
	 * The unix string to the email of this user.
	 */
	char       *szMail;
	/**
	 * PWD_USER_DISABLE | PWD_USER_UNIX | PWD_USER_PDC.
	 */
	AUTH_TYPE   authType;
	size_t      nAlloc;
} SYNOUSER, *PSYNOUSER;

/**
 * The shadow information. This struct should be only used for
 * user set (e.g. SYNOLocalAccountUserSet or SYNOLDAPBrowserUserEdit).
 *
 * The struct can only be used in the form of opaque pointer. The allocation,
 * free, get and set operations are provided in libsynosdk.
 */
typedef struct _tag_SYNOSHADOW *PSYNOSHADOW;

/**
 * Init the SYNOUSER @a pUser to all default values.
 *
 * @param[out] pUser The pointer to a SYNOUSER, should not be NULL.
 *
 * @return None.
 */
static inline void
SYNOUserInit(PSYNOUSER pUser)
{
	if (NULL == pUser) {
		return;
	}
	bzero (pUser, sizeof(SYNOUSER));
	pUser->pw_uid = UID_ERR;
	pUser->pw_gid = GID_USERS;
}

#ifdef SYNOSDK_LOCAL_ACCOUNT

/**
 * User DB handle.
 * Only libsynolocalaccount is allowed to use it.
 * We prevent others to use it by the flag SYNOSDK_LOCAL_ACCOUNT.
 */
typedef struct {
	PSYNOBDB pPWDName;
	PSYNOBDB pPWDUID;
	PSYNOBDB pPWDSynoUser;
	PSYNOBDB pPWDShadow;
} SYNOUSERDB, *PSYNOUSERDB;

typedef struct {
	char *smb_name;
	uid_t smb_uid;
	char *smb_lmhash;
	char *smb_nthash;
	char *smb_flags;
	char *smb_lstchg;
} SYNOSMBPASSWD;

#define SZF_NOLOGIN "/sbin/nologin"

#define INTERNAL_UID_MIN	100000
#define INTERNAL_UID_MAX	999999

#define SZK_CURRENT_UID		SYNO_BDB_SZK_PREFIX"CURRENT_UID"

#endif // SYNOSDK_LOCAL_ACCOUNT

typedef enum {
	SYNO_ALLOW_CH_PASSWORD,
	SYNO_DISALLOW_CH_PASSWORD,
	SYNO_NO_CHANGE_ALLOW_CH_PASSWORD,
} SYNOALLOWCHPASSWORD;

typedef enum {
	SYNO_MUST_CH_PASSWORD,
	SYNO_NO_CHANGE_MUST_CH_PASSWORD,
} SYNOMUSTCHPASSWORD;

typedef enum {
	SYNO_PASSWORD_NEVER_EXPIRE,
	SYNO_PASSWORD_MIGHT_EXPIRE,
	SYNO_NO_CHANGE_PASSWORD_MAX_AGE,
} SYNOPASSWORDMAXAGE;

typedef enum {
	SYNO_SHADOW_CREATE_USER,
	SYNO_SHADOW_UPDATE_USER,
} SYNOSHADOWALLOCTYPE;

/**
 * Callback function for SLIBUserInfoEnum APIs.
 *
 * - @a PSYNOUSER contains all info of a local user. For non-local user, it contains only info stored in local DB/cache.
 *   Use SYNOUserGet() to get detailed info, for non-local user only.
 * - @a int is the index of @a PSYNOUSER that matches the conditions (string-matching, paging) of SLIBUserInfoEnum APIs.
 * - Last pointer can carry anything the caller wants, SLIBUserInfoEnum APIs will pass it intactly to the callback function.
 *
 * Keep you own copy of @a PSYNOUSER in callback function if necessary, this won't be available after callback function returns.
 *
 * @retval 0 Continue enumeration process.
 * @retval <0 Interrupt enumeration process.
 */
typedef int (*UserEnumCallback)(const PSYNOUSER, int, void *);

/**
 * @}
 */

#ifndef NO_PROTO
#include <availability.h>
#include <synosdk/user_p.h>
#endif // NO_PROTO

__END_DECLS;
#endif  /* __SYNO_USER_H__ */
