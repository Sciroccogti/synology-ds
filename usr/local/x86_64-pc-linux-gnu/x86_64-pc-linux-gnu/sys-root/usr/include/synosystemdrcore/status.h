/* Copyright (c) 2000-2015 Synology Inc. All rights reserved. */
#ifndef __SYNOSYSDRCORE_STATUS_H__
#define __SYNOSYSDRCORE_STATUS_H__

#include <string>
#include <json/value.h>
#include <synosystemdrcore/conf/conf_def.h>

namespace SynoSysDRCore {
namespace Status {

const std::string SZK_RUNNING_STATUS = "RunningStatus";
#define SDR_UNKNOWN_STATUS                0x80000000

typedef enum {
	SDR_RUNNING_STATUS_UNKNOWN          = SDR_UNKNOWN_STATUS,
	SDR_RUNNING_STATUS_NONE             = 0x00000000,
	SDR_RUNNING_STATUS_BINDING          = 0x00000001,
	SDR_RUNNING_STATUS_SWITCHOVER       = 0x00000002,
	SDR_RUNNING_STATUS_UNBINDING        = 0x00000004,
	SDR_RUNNING_STATUS_FAILOVER         = 0x00000008,
	SDR_RUNNING_STATUS_REPROTECT        = 0x00000010,
	SDR_RUNNING_STATUS_START_TESTING    = 0x00000020,
	SDR_RUNNING_STATUS_STOP_TESTING     = 0x00000040,
	SDR_RUNNING_STATUS_SYNCING          = 0x00000080,
	SDR_RUNNING_STATUS_SCHEDULE_SYNCING = 0x00000100,
	SDR_RUNNING_STATUS_UPDATE_DSM       = 0x00000200,
	SDR_RUNNING_STATUS_UPDATE_PACKAGE   = 0x00000400,

	SDR_RUNNING_STATUS_MASK_KEEP_SESSION =
		SDR_RUNNING_STATUS_BINDING | SDR_RUNNING_STATUS_SWITCHOVER | SDR_RUNNING_STATUS_FAILOVER |
		SDR_RUNNING_STATUS_REPROTECT | SDR_RUNNING_STATUS_START_TESTING | SDR_RUNNING_STATUS_STOP_TESTING |
		SDR_RUNNING_STATUS_UPDATE_DSM,
	SDR_RUNNING_STATUS_MASK_SYNCING =
		SDR_RUNNING_STATUS_SYNCING | SDR_RUNNING_STATUS_SCHEDULE_SYNCING,
	SDR_RUNNING_STATUS_MASK_POWEROFF_FEASIBLITY_HARD =
		SDR_RUNNING_STATUS_BINDING | SDR_RUNNING_STATUS_SWITCHOVER | SDR_RUNNING_STATUS_UNBINDING |
		SDR_RUNNING_STATUS_FAILOVER | SDR_RUNNING_STATUS_REPROTECT | SDR_RUNNING_STATUS_START_TESTING |
		SDR_RUNNING_STATUS_STOP_TESTING,
	SDR_RUNNING_STATUS_MASK_DELETE_TARGET_FORBIDDEN =
		SDR_RUNNING_STATUS_BINDING | SDR_RUNNING_STATUS_SWITCHOVER | SDR_RUNNING_STATUS_UNBINDING |
		SDR_RUNNING_STATUS_FAILOVER | SDR_RUNNING_STATUS_START_TESTING | SDR_RUNNING_STATUS_STOP_TESTING |
		SDR_RUNNING_STATUS_SYNCING | SDR_RUNNING_STATUS_SCHEDULE_SYNCING,
	SDR_RUNNING_STATUS_MASK_UMOUNT_SHARE =
		SDR_RUNNING_STATUS_SWITCHOVER | SDR_RUNNING_STATUS_FAILOVER | SDR_RUNNING_STATUS_REPROTECT |
		SDR_RUNNING_STATUS_START_TESTING | SDR_RUNNING_STATUS_STOP_TESTING | SDR_RUNNING_STATUS_UNBINDING,
} RunningStatus;

typedef enum {
	SDR_NODE_STATUS_UNKNOWN                = SDR_UNKNOWN_STATUS,
	SDR_NODE_STATUS_NONE                   = 0x00000000,
	SDR_NODE_STATUS_SYNC_TOO_SLOW          = 0x00000001,
	SDR_NODE_STATUS_SYNC_FAILED            = 0x00000002,
	SDR_NODE_STATUS_IN_REPROTECT_DEMOTE    = 0x00000004,
	SDR_NODE_STATUS_NEED_REPAIR_PLANS      = 0x00000008,
	SDR_NODE_STATUS_DRSITE_UPDATING_RESOTRE_FORBIDDEN
	                                       = 0x00000010,
	SDR_NODE_STATUS_NEED_UPDATE_REMOTE_DSM = 0x00000020,
	SDR_NODE_STATUS_NEED_UPDATE_REMOTE_CU  = 0x00000040,
	SDR_NODE_STATUS_WAIT_INITIAL_DATA      = 0x00000080,
	SDR_NODE_STATUS_RESTORE_FAILURE        = 0x00000100,
	SDR_NODE_STATUS_UPDATE_PACKAGE         = 0x00000200,
	SDR_NODE_STATUS_STOP                   = 0x00000400,
	SDR_NODE_STATUS_REMOTE_FAILOVER        = 0x00000800,
	SDR_NODE_STATUS_FAILOVER               = 0x00001000,
} NodeStatus;

bool setRunningStatus(const RunningStatus);
bool cleanRunningStatus(const RunningStatus);
RunningStatus getRunningStatus();

bool resetNodeStatusTo(const NodeStatus);
bool addNodeStatus(const NodeStatus);
bool cleanNodeStatus(const NodeStatus);
bool hasNodeStatus(const NodeStatus);
NodeStatus getNodeStatus();

bool setSysDRReady();
bool isSysDRReady();

}//Status
}//SynoSysDRCore

#endif //__SYNOSYSDRCORE_STATUS_H__
